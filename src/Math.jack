class Math {
    static int biteArraySize; // 15
    static int digitBitSize; // 16
    static Array powersOfTwo;

    function void init() {
        var int i, j;
        let biteArraySize = 15;
        let digitBitSize = 16;

        let powersOfTwo = Array.new(biteArraySize);
        let powersOfTwo[0] = 1;
        
        let i = 1;
        while (i < biteArraySize) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }

        return;
    }

    // TODO: Можно воткнуть оптимизацию если есть четные числа
    function int multiply(int x, int y) {
        return Math.multiplyBitArrays(
            Math.getBitArray(x), 
            Math.getBitArray(y),
            Math.getIntBitLength(y)
        );
    }

    // x,y 16bit
    function int multiplyBitArrays(Array x, Array y, int yLen) {
        var int i, j, sum;
        var Array supportArrays, tmp; // 15bit

        // [0, len]
        let yLen = yLen + 1;
        let supportArrays = Array.new(yLen);

        let i = 0;
        while (i < yLen) {
            let supportArrays[i] = Array.new(biteArraySize);
            // init zero
            let j = 0;
            let tmp = supportArrays[i];
            while (j < biteArraySize) {
                let tmp[j] = 0;
                let j = j + 1;
            }

            let j = 0;
            while ((j + i) < biteArraySize) {
                let tmp = supportArrays[i];
                
                let sum = j + i;
                let sum = sum;

                let tmp[sum] = x[j + 1];

                let j = j + 1;
            }

            let i = i + 1;
        }


        let sum = 0;
        let i = 0;
        while (i < yLen) {
            if (y[i + 1]) {
                let sum = sum + Math.arrayToInt(supportArrays[i]);
            }
            let i = i + 1;
        }

        // negative
        let i = x[0] + y[0];
        if ((i > 0) & (i < 2)) {
            let sum = -sum;
        }

        return sum;
    }

    function int devide(int x, int y) {
        var int res;
        let res = Math.absDevide(x, y);
        if ((x > 0) & (y > 0)) {
            return res;
        }

        if ((x < 0) & (y < 0)) {
            return res;
        }

        return -res;
    }

    function int absDevide(int x, int y) {
        var int q, doubleY, tmp, res;

        let x = Math.abs(x);
        let y = Math.abs(y);
        if (x < y) {
            return 0;
        }

        if (Math.equals(x, y)) {
            return 1;
        }

        let doubleY = Math.multiply(y, 2);
        let q = Math.absDevide(x, doubleY);
        let tmp = Math.multiply(doubleY, q);
        
        if ((x - tmp) < y) {
            return Math.multiply(q, 2);
        } else {
            // в остатке у нас поместится по-крайней мере еще один y
            return Math.multiply(q, 2) + 1;
        }
    }

    function boolean equals(int x, int y) {
        return (~(x < y)) & (~(x > y));
    }

    //TODO: sqrt
    function int sqrt(int x) {
        return -1;
    }

    // bitInt 15 bits
    function int arrayToInt(Array bitInt) {
        var int i, sum;

        let i = 0;
        let sum = 0;
        while (i < biteArraySize) {
            if (bitInt[i]) {
                let sum = sum + powersOfTwo[i];
            }
            let i = i + 1;
        }

        return sum;
    }

    // output 16 bit, zero bit is sign flag
    function Array getBitArray(int x) {
        var Array bitArray;
        var int i, sum, absX;

        // init bits
        let bitArray = Array.new(digitBitSize);
        let i = 0;
        while (i < digitBitSize) {
            let bitArray[i] = false;
            let i = i + 1;
        }

        if (x < 0) {
            let bitArray[0] = true;
        }

        // without bit flag
        let i = Math.getIntBitLength(x);
        let bitArray[i + 1] = true;
        let sum = powersOfTwo[i];
        let absX = Math.abs(x);
        while (sum < absX) {
             while ((sum + powersOfTwo[i]) > x) {
                let i = i - 1;
            }

            let sum = sum + powersOfTwo[i];
            let bitArray[i + 1] = true;
        }

        let i = 0;
        while (i < digitBitSize) {
            let i = i + 1;
        }

        return bitArray;
    }

    // Длина без учета флага знака
    function int getIntBitLength(int x) {
        var int i, absX;
        let absX = Math.abs(x);

        let i = 0;
        while (powersOfTwo[i] < absX) {
            let i = i + 1;
        }

        if (powersOfTwo[i] > absX) {
            let i = i - 1;
        }

        return i;
    }

    function int min(int a, int b) {
        if (a > b) {
            return b;
        }

        return a;
    }

    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }
}