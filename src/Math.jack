class Math {
    static int CONST_15;
    static Array powersOfTwo;

    function void init() {
        var int i, j;
        let CONST_15 = 15;

        let powersOfTwo = Array.new(CONST_15);
        let powersOfTwo[0] = 1;
        
        let i = 1;
        while (i < CONST_15) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }

        return;
    }

    // TODO: Можно воткнуть оптимизацию если есть четные числа
    // сдвиги 3 * 2 -> 11 * 01 -> 011
    function int multiply(int x, int y) {
        var int absX, absY, res;
        if ((x = 0) | (y = 0)) {
            return 0;
        }

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let res = Math.multiplyBitArrays(
            Math.getBitArray(absX), 
            Math.getBitArray(absY)
        );

        if ((x > 0) & (y > 0)) {
            return res;
        }

        if ((x < 0) & (y < 0)) {
            return res;
        }

        return -res;
    }

    function int multiplyBitArrays(Array x, Array y) {
        var int i, j, sum, yLen;
        var Array supportArrays, tmp; // 15bit

        let i = 0;
        let yLen = 0;
        while (i < CONST_15) {
            if (y[i] & (i > yLen)) {
                let yLen = i;
            }
            let i = i + 1;
        }
        let yLen = yLen + 1;
        let supportArrays =  Array.new(yLen);

        let i = 0;
        while (i < yLen) {
            let supportArrays[i] = Array.new(CONST_15);
            
            // init zero
            let j = 0;
            let tmp = supportArrays[i];
            while (j < CONST_15) {
                let tmp[j] = 0;
                let j = j + 1;
            }

            let j = 0;
            let tmp = supportArrays[i];
            while ((j + i) < CONST_15) {
                let sum = j + i;
                let tmp[sum] = x[j];

                let j = j + 1;
            }

            let i = i + 1;
        }

        let sum = 0;
        let i = 0;
        while (i < yLen) {
            if (y[i]) {
                let sum = sum + Math.arrayToInt(supportArrays[i]);
            }
            let i = i + 1;
        }

        return sum;
    }

    function int devide(int x, int y) {
        var int res;
        if (x = 0) {
            return 0;
        }

        if (y = 1) {
            return x;
        }

        let res = Math.absDevide(x, y);
        if ((x > 0) & (y > 0)) {
            return res;
        }

        if ((x < 0) & (y < 0)) {
            return res;
        }

        return -res;
    }

    function int absDevide(int x, int y) {
        var int q, doubleY;

        let x = Math.abs(x);
        let y = Math.abs(y);
        if (x < y) {
            return 0;
        }

        if (x = y) {
            return 1;
        }

        let doubleY = Math.multiply(y, 2);
        let q = Math.absDevide(x, doubleY);

        if ((x - Math.multiply(doubleY, q)) < y) {
            return Math.multiply(q, 2);
        } else {
            return Math.multiply(q, 2) + 1;
        }
    }

    function boolean equals(int x, int y) {
        return (~(x < y)) & (~(x > y));
    }

    function int sqrt(int x) {
        var int right, left, curr, power, tmp;
        if ((x = 0) | (x = 1)) {
            return x;
        }

        let right = Math.devide(x, 2);
        let left = 2;
        while ((right > left) | Math.equals(right, left)) {
            let tmp = left + right;
            let curr = Math.devide(tmp, 2);

            let power = Math.multiply(curr, curr);
            if (power < x) {
                let left = curr + 1;
            }

            if (power > x) {
                let right = curr - 1;
            }

            if (Math.equals(power, x)) {
                return curr;
            }
        }

        return -1;
    }

    function int arrayToInt(Array bitInt) {
        var int i, sum;

        let i = 0;
        let sum = 0;
        while (i < CONST_15) {
            if (bitInt[i]) {
                let sum = sum + powersOfTwo[i];
            }
            let i = i + 1;
        }

        return sum;
    }

    function Array getBitArray(int x) {
        var Array bitArray;
        var int i, sum, absX;

        // init bits
        let bitArray = Array.new(CONST_15);
        let i = 0;
        while (i < CONST_15) {
            let bitArray[i] = false;
            let i = i + 1;
        }

        // without bit flag
        let i = Math.getIntBitLength(x);
        let bitArray[i] = true;
        let sum = powersOfTwo[i];
        let absX = Math.abs(x);
        while (sum < absX) {
             while ((sum + powersOfTwo[i]) > x) {
                let i = i - 1;
            }

            let sum = sum + powersOfTwo[i];
            let bitArray[i] = true;
        }

        return bitArray;
    }

    function int getIntBitLength(int x) {
        var int i;

        let i = 0;
        while (powersOfTwo[i] < x) {
            let i = i + 1;
        }

        if (powersOfTwo[i] > x) {
            let i = i - 1;
        }

        return i;
    }

    function int min(int a, int b) {
        if (a > b) {
            return b;
        }

        return a;
    }

    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }
}