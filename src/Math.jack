class Math {
    static int biteArraySize; // 15
    static int digitBitSize; // 16
    static Array powersOfTwo;

    function void init() {
        var int i, j;
        let biteArraySize = 15;
        let digitBitSize = 16;

        let powersOfTwo = Array.new(biteArraySize);
        let powersOfTwo[0] = 1;
        
        let i = 1;
        while (i < biteArraySize) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }

        return;
    }

    // пока в тупую
    function int multiply(int x, int y) {
        return Math.multiplyBitArrays(
            Math.getBitArray(x), 
            Math.getBitArray(y),
            Math.getIntBitLength(y)
        );
    }

    // x,y 16bit
    function int multiplyBitArrays(Array x, Array y, int yLen) {
        var int i, j, sum;
        var Array supportArrays, tmp; // 15bit

        // [0, len]
        let yLen = yLen + 1;
        let supportArrays = Array.new(yLen);

        let i = 0;
        while (i < yLen) {
            let supportArrays[i] = Array.new(biteArraySize);
            // init zero
            let j = 0;
            let tmp = supportArrays[i];
            while (j < biteArraySize) {
                let tmp[j] = 0;
                let j = j + 1;
            }

            let j = 0;
            while ((j + i) < biteArraySize) {
                let tmp = supportArrays[i];
                
                let sum = j + i;
                let sum = sum;

                let tmp[sum] = x[j + 1];

                let j = j + 1;
            }

            let i = i + 1;
        }


        let sum = 0;
        let i = 0;
        while (i < yLen) {
            if (y[i + 1]) {
                let sum = sum + Math.arrayToInt(supportArrays[i]);
            }
            let i = i + 1;
        }

        // negative
        let i = x[0] + y[0];
        if ((i > 0) & (i < 2)) {
            let sum = -sum;
        }

        return sum;
    }

    // function int devide(int x, int y) {
    //     var int res, sum;
    //     var Array xArr, yArr;

    //     let xArr = Math.getBitArray(x);
    //     let yArr = Math.getBitArray(y);

    //     let res = 0;
    //     let sum = x;

    //     while (sum > y) {
    //         let sum = sum - y;
    //         let res = res + 1;
    //     }

    //     return res;
    // }

    // function int sqrt(int x) {
    //     return -1;
    // }

    // bitInt 15 bits
    function int arrayToInt(Array bitInt) {
        var int i, sum;

        let i = 0;
        let sum = 0;
        while (i < biteArraySize) {
            if (bitInt[i]) {
                let sum = sum + powersOfTwo[i];
            }
            let i = i + 1;
        }

        return sum;
    }

    // zero bit is flag
    function Array getBitArray(int x) {
        var Array bitArray;
        var int i, sum, absX;

        // init bits
        let bitArray = Array.new(digitBitSize);
        let i = 0;
        while (i < digitBitSize) {
            let bitArray[i] = false;
            let i = i + 1;
        }

        if (x < 0) {
            let bitArray[0] = true;
        }

        // without bit flag
        let i = Math.getIntBitLength(x);
        let bitArray[i + 1] = true;
        let sum = powersOfTwo[i];
        let absX = Math.abs(x);
        while (sum < absX) {
             while ((sum + powersOfTwo[i]) > x) {
                let i = i - 1;
            }

            let sum = sum + powersOfTwo[i];
            let bitArray[i + 1] = true;
        }

        let i = 0;
        while (i < digitBitSize) {
            let i = i + 1;
        }

        return bitArray;
    }

    // Длина без учета флага знака
    function int getIntBitLength(int x) {
        var int i, absX;
        let absX = Math.abs(x);

        let i = 0;
        while (powersOfTwo[i] < absX) {
            let i = i + 1;
        }

        if (powersOfTwo[i] > absX) {
            let i = i - 1;
        }

        return i;
    }

    function int abs(int x) {
        var int absX;

        let absX = x;
        if (absX < 0) {
            let absX = -absX;
        }

        return absX;
    }
}